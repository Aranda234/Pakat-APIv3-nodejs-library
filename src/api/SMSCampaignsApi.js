/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateSmsCampaign1', 'model/GetSmsCampaign1', 'model/InlineResponse20021', 'model/InlineResponse20021Campaigns', 'model/InlineResponse201', 'model/InlineResponse202', 'model/InlineResponse4001', 'model/InlineResponse403', 'model/RecipientExport1', 'model/SendReport2', 'model/SendTestSms1', 'model/Status1', 'model/UpdateSmsCampaign1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateSmsCampaign1'), require('../model/GetSmsCampaign1'), require('../model/InlineResponse20021'), require('../model/InlineResponse20021Campaigns'), require('../model/InlineResponse201'), require('../model/InlineResponse202'), require('../model/InlineResponse4001'), require('../model/InlineResponse403'), require('../model/RecipientExport1'), require('../model/SendReport2'), require('../model/SendTestSms1'), require('../model/Status1'), require('../model/UpdateSmsCampaign1'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.SMSCampaignsApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.CreateSmsCampaign1, root.SendinBlueApi.GetSmsCampaign1, root.SendinBlueApi.InlineResponse20021, root.SendinBlueApi.InlineResponse20021Campaigns, root.SendinBlueApi.InlineResponse201, root.SendinBlueApi.InlineResponse202, root.SendinBlueApi.InlineResponse4001, root.SendinBlueApi.InlineResponse403, root.SendinBlueApi.RecipientExport1, root.SendinBlueApi.SendReport2, root.SendinBlueApi.SendTestSms1, root.SendinBlueApi.Status1, root.SendinBlueApi.UpdateSmsCampaign1);
  }
}(this, function(ApiClient, CreateSmsCampaign1, GetSmsCampaign1, InlineResponse20021, InlineResponse20021Campaigns, InlineResponse201, InlineResponse202, InlineResponse4001, InlineResponse403, RecipientExport1, SendReport2, SendTestSms1, Status1, UpdateSmsCampaign1) {
  'use strict';

  /**
   * SMSCampaigns service.
   * @module api/SMSCampaignsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new SMSCampaignsApi. 
   * @alias module:api/SMSCampaignsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSMSCampaign operation.
     * @callback module:api/SMSCampaignsApi~createSMSCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a SMS campaign
     * @param {module:model/CreateSmsCampaign1} createSmsCampaign Values to create an SMS Campaign
     * @param {module:api/SMSCampaignsApi~createSMSCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    this.createSMSCampaign = function(createSmsCampaign, callback) {
      var postBody = createSmsCampaign;

      // verify the required parameter 'createSmsCampaign' is set
      if (createSmsCampaign === undefined || createSmsCampaign === null) {
        throw new Error("Missing the required parameter 'createSmsCampaign' when calling createSMSCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/smsCampaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSMSCampaigns operation.
     * @callback module:api/SMSCampaignsApi~deleteSMSCampaignsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:api/SMSCampaignsApi~deleteSMSCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSMSCampaigns = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSMSCampaigns");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSMSCampaigns operation.
     * @callback module:api/SMSCampaignsApi~getSMSCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the informations for all your created SMS campaigns
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Status of campaign.
     * @param {Number} opts.limit Number limitation for the result returned (default to 500)
     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)
     * @param {module:api/SMSCampaignsApi~getSMSCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.getSMSCampaigns = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/smsCampaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmsCampaign operation.
     * @callback module:api/SMSCampaignsApi~getSmsCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021Campaigns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:model/GetSmsCampaign1} getSmsCampaign Values to update an SMS Campaign
     * @param {module:api/SMSCampaignsApi~getSmsCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021Campaigns}
     */
    this.getSmsCampaign = function(campaignId, getSmsCampaign, callback) {
      var postBody = getSmsCampaign;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getSmsCampaign");
      }

      // verify the required parameter 'getSmsCampaign' is set
      if (getSmsCampaign === undefined || getSmsCampaign === null) {
        throw new Error("Missing the required parameter 'getSmsCampaign' when calling getSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021Campaigns;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSMSRecipientExport operation.
     * @callback module:api/SMSCampaignsApi~requestSMSRecipientExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the recipients of the specified campaign.
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @param {String} campaignId id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/RecipientExport1} opts.recipientExport Values to send for a recipient export request
     * @param {module:api/SMSCampaignsApi~requestSMSRecipientExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    this.requestSMSRecipientExport = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = opts['recipientExport'];

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling requestSMSRecipientExport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/exportRecipients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSMSCampaignNow operation.
     * @callback module:api/SMSCampaignsApi~sendSMSCampaignNowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send your SMS campaign immediately
     * @param {String} campaignId id of the campaign
     * @param {module:api/SMSCampaignsApi~sendSMSCampaignNowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendSMSCampaignNow = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendSMSCampaignNow");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendNow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSMSReport operation.
     * @callback module:api/SMSCampaignsApi~sendSMSReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send report of SMS campaigns
     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
     * @param {String} campaignId id of the campaign
     * @param {module:model/SendReport2} sendReport Values for send a report
     * @param {module:api/SMSCampaignsApi~sendSMSReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendSMSReport = function(campaignId, sendReport, callback) {
      var postBody = sendReport;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendSMSReport");
      }

      // verify the required parameter 'sendReport' is set
      if (sendReport === undefined || sendReport === null) {
        throw new Error("Missing the required parameter 'sendReport' when calling sendSMSReport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTestSms operation.
     * @callback module:api/SMSCampaignsApi~sendTestSmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an SMS
     * @param {String} campaignId Id of the SMS campaign
     * @param {module:model/SendTestSms1} sendTestSms Mobile number to which send the test
     * @param {module:api/SMSCampaignsApi~sendTestSmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendTestSms = function(campaignId, sendTestSms, callback) {
      var postBody = sendTestSms;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendTestSms");
      }

      // verify the required parameter 'sendTestSms' is set
      if (sendTestSms === undefined || sendTestSms === null) {
        throw new Error("Missing the required parameter 'sendTestSms' when calling sendTestSms");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSMSCampaignStatus operation.
     * @callback module:api/SMSCampaignsApi~updateSMSCampaignStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the campaign status
     * @param {String} campaignId id of the campaign
     * @param {module:model/Status1} status Status of the campaign.
     * @param {module:api/SMSCampaignsApi~updateSMSCampaignStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSMSCampaignStatus = function(campaignId, status, callback) {
      var postBody = status;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateSMSCampaignStatus");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateSMSCampaignStatus");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmsCampaign operation.
     * @callback module:api/SMSCampaignsApi~updateSmsCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:model/UpdateSmsCampaign1} updateSmsCampaign Values to update an SMS Campaign
     * @param {module:api/SMSCampaignsApi~updateSmsCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSmsCampaign = function(campaignId, updateSmsCampaign, callback) {
      var postBody = updateSmsCampaign;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateSmsCampaign");
      }

      // verify the required parameter 'updateSmsCampaign' is set
      if (updateSmsCampaign === undefined || updateSmsCampaign === null) {
        throw new Error("Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
