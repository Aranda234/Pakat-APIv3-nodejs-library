/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EmailCampaign', 'model/EmailCampaigns', 'model/EmailTo', 'model/InlineResponse2008', 'model/InlineResponse2008Campaigns', 'model/InlineResponse201', 'model/InlineResponse202', 'model/InlineResponse400', 'model/InlineResponse403', 'model/RecipientExport', 'model/SendReport1', 'model/Status'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EmailCampaign'), require('../model/EmailCampaigns'), require('../model/EmailTo'), require('../model/InlineResponse2008'), require('../model/InlineResponse2008Campaigns'), require('../model/InlineResponse201'), require('../model/InlineResponse202'), require('../model/InlineResponse400'), require('../model/InlineResponse403'), require('../model/RecipientExport'), require('../model/SendReport1'), require('../model/Status'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.EmailCampaignsApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.EmailCampaign, root.SendinBlueApi.EmailCampaigns, root.SendinBlueApi.EmailTo, root.SendinBlueApi.InlineResponse2008, root.SendinBlueApi.InlineResponse2008Campaigns, root.SendinBlueApi.InlineResponse201, root.SendinBlueApi.InlineResponse202, root.SendinBlueApi.InlineResponse400, root.SendinBlueApi.InlineResponse403, root.SendinBlueApi.RecipientExport, root.SendinBlueApi.SendReport1, root.SendinBlueApi.Status);
  }
}(this, function(ApiClient, EmailCampaign, EmailCampaigns, EmailTo, InlineResponse2008, InlineResponse2008Campaigns, InlineResponse201, InlineResponse202, InlineResponse400, InlineResponse403, RecipientExport, SendReport1, Status) {
  'use strict';

  /**
   * EmailCampaigns service.
   * @module api/EmailCampaignsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new EmailCampaignsApi. 
   * @alias module:api/EmailCampaignsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createEmailCampaign operation.
     * @callback module:api/EmailCampaignsApi~createEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an email campaign
     * @param {module:model/EmailCampaigns} emailCampaigns Values to create a campaign
     * @param {module:api/EmailCampaignsApi~createEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    this.createEmailCampaign = function(emailCampaigns, callback) {
      var postBody = emailCampaigns;

      // verify the required parameter 'emailCampaigns' is set
      if (emailCampaigns === undefined || emailCampaigns === null) {
        throw new Error("Missing the required parameter 'emailCampaigns' when calling createEmailCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/emailCampaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailCampaigns operation.
     * @callback module:api/EmailCampaignsApi~deleteEmailCampaignsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an email campaign
     * @param {String} campaignId id of the campaign
     * @param {module:api/EmailCampaignsApi~deleteEmailCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEmailCampaigns = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteEmailCampaigns");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emailExportRecipients operation.
     * @callback module:api/EmailCampaignsApi~emailExportRecipientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export the recipients of a campaign
     * @param {String} campaignId Id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/RecipientExport} opts.recipientExport Values to send for a recipient export request
     * @param {module:api/EmailCampaignsApi~emailExportRecipientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    this.emailExportRecipients = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = opts['recipientExport'];

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling emailExportRecipients");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}/exportRecipients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaign operation.
     * @callback module:api/EmailCampaignsApi~getEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008Campaigns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get campaign informations
     * @param {String} campaignId Id of the campaign
     * @param {module:api/EmailCampaignsApi~getEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008Campaigns}
     */
    this.getEmailCampaign = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getEmailCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008Campaigns;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaigns operation.
     * @callback module:api/EmailCampaignsApi~getEmailCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all your created campaigns
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type Filter on the type of the campaigns
     * @param {module:model/String} opts.status Filter on the status of the campaign
     * @param {Number} opts.limit Number of documents per page (default to 500)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:api/EmailCampaignsApi~getEmailCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    this.getEmailCampaigns = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/emailCampaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailCampaignNow operation.
     * @callback module:api/EmailCampaignsApi~sendEmailCampaignNowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an email campaign id of the campaign immediately
     * @param {String} campaignId Id of the campaign
     * @param {module:api/EmailCampaignsApi~sendEmailCampaignNowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendEmailCampaignNow = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendEmailCampaignNow");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}/sendNow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendReport operation.
     * @callback module:api/EmailCampaignsApi~sendReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the report of a campaigns
     * A PDF will be sent to the specified email addresses
     * @param {String} campaignId Id of the campaign
     * @param {module:model/SendReport1} sendReport Values for send a report
     * @param {module:api/EmailCampaignsApi~sendReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendReport = function(campaignId, sendReport, callback) {
      var postBody = sendReport;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendReport");
      }

      // verify the required parameter 'sendReport' is set
      if (sendReport === undefined || sendReport === null) {
        throw new Error("Missing the required parameter 'sendReport' when calling sendReport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}/sendReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTestEmail operation.
     * @callback module:api/EmailCampaignsApi~sendTestEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an email campaign to your test list
     * @param {String} campaignId Id of the campaign
     * @param {module:model/EmailTo} emailTo 
     * @param {module:api/EmailCampaignsApi~sendTestEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendTestEmail = function(campaignId, emailTo, callback) {
      var postBody = emailTo;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendTestEmail");
      }

      // verify the required parameter 'emailTo' is set
      if (emailTo === undefined || emailTo === null) {
        throw new Error("Missing the required parameter 'emailTo' when calling sendTestEmail");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}/sendTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignStatus operation.
     * @callback module:api/EmailCampaignsApi~updateCampaignStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a campaign status
     * @param {String} campaignId Id of the campaign
     * @param {module:model/Status} status Status of the campaign
     * @param {module:api/EmailCampaignsApi~updateCampaignStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCampaignStatus = function(campaignId, status, callback) {
      var postBody = status;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCampaignStatus");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateCampaignStatus");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCampaigns operation.
     * @callback module:api/EmailCampaignsApi~updateEmailCampaignsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a campaign
     * @param {String} campaignId Id of the campaign
     * @param {module:model/EmailCampaign} emailCampaign Values to update a campaign
     * @param {module:api/EmailCampaignsApi~updateEmailCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateEmailCampaigns = function(campaignId, emailCampaign, callback) {
      var postBody = emailCampaign;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateEmailCampaigns");
      }

      // verify the required parameter 'emailCampaign' is set
      if (emailCampaign === undefined || emailCampaign === null) {
        throw new Error("Missing the required parameter 'emailCampaign' when calling updateEmailCampaigns");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emailCampaigns/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
