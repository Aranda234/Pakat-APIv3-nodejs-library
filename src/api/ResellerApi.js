/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddCredits1', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse201', 'model/InlineResponse403', 'model/IpId', 'model/IpId1', 'model/RemoveCredits1', 'model/ResellerChild', 'model/ResellerChild1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddCredits1'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse201'), require('../model/InlineResponse403'), require('../model/IpId'), require('../model/IpId1'), require('../model/RemoveCredits1'), require('../model/ResellerChild'), require('../model/ResellerChild1'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.ResellerApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.AddCredits1, root.SendinBlueApi.InlineResponse2001, root.SendinBlueApi.InlineResponse2002, root.SendinBlueApi.InlineResponse2003, root.SendinBlueApi.InlineResponse201, root.SendinBlueApi.InlineResponse403, root.SendinBlueApi.IpId, root.SendinBlueApi.IpId1, root.SendinBlueApi.RemoveCredits1, root.SendinBlueApi.ResellerChild, root.SendinBlueApi.ResellerChild1);
  }
}(this, function(ApiClient, AddCredits1, InlineResponse2001, InlineResponse2002, InlineResponse2003, InlineResponse201, InlineResponse403, IpId, IpId1, RemoveCredits1, ResellerChild, ResellerChild1) {
  'use strict';

  /**
   * Reseller service.
   * @module api/ResellerApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ResellerApi. 
   * @alias module:api/ResellerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCredits operation.
     * @callback module:api/ResellerApi~addCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Email and/or SMS credits to a specific child account
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:model/AddCredits1} addCredits Values to post to add credit to a specific child account
     * @param {module:api/ResellerApi~addCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.addCredits = function(childId, addCredits, callback) {
      var postBody = addCredits;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling addCredits");
      }

      // verify the required parameter 'addCredits' is set
      if (addCredits === undefined || addCredits === null) {
        throw new Error("Missing the required parameter 'addCredits' when calling addCredits");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/reseller/children/{childId}/credits/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the associateIpToChild operation.
     * @callback module:api/ResellerApi~associateIpToChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a dedicated IP to the child
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:model/IpId} ipId IP&#39;s id
     * @param {module:api/ResellerApi~associateIpToChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.associateIpToChild = function(childId, ipId, callback) {
      var postBody = ipId;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling associateIpToChild");
      }

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling associateIpToChild");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childId}/ips/associate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createResellerChild operation.
     * @callback module:api/ResellerApi~createResellerChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a reseller child
     * @param {Object} opts Optional parameters
     * @param {module:model/ResellerChild} opts.resellerChild reseller child to add
     * @param {module:api/ResellerApi~createResellerChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    this.createResellerChild = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['resellerChild'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/reseller/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResellerChild operation.
     * @callback module:api/ResellerApi~deleteResellerChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single reseller child based on the childId supplied
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:api/ResellerApi~deleteResellerChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteResellerChild = function(childId, callback) {
      var postBody = null;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling deleteResellerChild");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dissociateIpFromChild operation.
     * @callback module:api/ResellerApi~dissociateIpFromChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dissociate a dedicated IP to the child
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:model/IpId1} ipId IP&#39;s id
     * @param {module:api/ResellerApi~dissociateIpFromChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dissociateIpFromChild = function(childId, ipId, callback) {
      var postBody = ipId;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling dissociateIpFromChild");
      }

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling dissociateIpFromChild");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childId}/ips/dissociate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChildInfo operation.
     * @callback module:api/ResellerApi~getChildInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the info about a specific child account
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:api/ResellerApi~getChildInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.getChildInfo = function(childId, callback) {
      var postBody = null;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling getChildInfo");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/reseller/children/{childId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResellerChilds operation.
     * @callback module:api/ResellerApi~getResellerChildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all reseller&#39;s children accounts
     * @param {module:api/ResellerApi~getResellerChildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.getResellerChilds = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/reseller/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCredits operation.
     * @callback module:api/ResellerApi~removeCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Email and/or SMS credits from a specific child account
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:model/RemoveCredits1} removeCredits Values to post to remove email or SMS credits from a specific child account
     * @param {module:api/ResellerApi~removeCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.removeCredits = function(childId, removeCredits, callback) {
      var postBody = removeCredits;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling removeCredits");
      }

      // verify the required parameter 'removeCredits' is set
      if (removeCredits === undefined || removeCredits === null) {
        throw new Error("Missing the required parameter 'removeCredits' when calling removeCredits");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/reseller/children/{childId}/credits/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResellerChild operation.
     * @callback module:api/ResellerApi~updateResellerChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates infos of reseller&#39;s child based on the childId supplied
     * @param {Number} childId id of reseller&#39;s child
     * @param {module:model/ResellerChild1} resellerChild values to update in child profile
     * @param {module:api/ResellerApi~updateResellerChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateResellerChild = function(childId, resellerChild, callback) {
      var postBody = resellerChild;

      // verify the required parameter 'childId' is set
      if (childId === undefined || childId === null) {
        throw new Error("Missing the required parameter 'childId' when calling updateResellerChild");
      }

      // verify the required parameter 'resellerChild' is set
      if (resellerChild === undefined || resellerChild === null) {
        throw new Error("Missing the required parameter 'resellerChild' when calling updateResellerChild");
      }


      var pathParams = {
        'childId': childId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
